package handlers

import (
	"encoding/json"
	"net/http"
	"strconv"

	"bookstore/models"
	"github.com/gorilla/mux"
)

var books []models.Book
var bookIDCounter int

func GetBooks(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä category_id
	categoryID, _ := strconv.Atoi(query.Get("category_id"))

	// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–Ω–∏–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	var filteredBooks []models.Book
	for _, book := range books {
		if categoryID > 0 && book.CategoryID != categoryID {
			continue
		}
		filteredBooks = append(filteredBooks, book)
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(filteredBooks)
}

func AddBook(w http.ResponseWriter, r *http.Request) {
	var book models.Book
	err := json.NewDecoder(r.Body).Decode(&book)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –≤ JSON", http.StatusBadRequest)
		return
	}

	// üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
	if book.Title == "" {
		http.Error(w, "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", http.StatusBadRequest)
		return
	}
	if book.AuthorID <= 0 {
		http.Error(w, "ID –∞–≤—Ç–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0", http.StatusBadRequest)
		return
	}
	if book.CategoryID <= 0 {
		http.Error(w, "ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0", http.StatusBadRequest)
		return
	}
	if book.Price <= 0 {
		http.Error(w, "–¶–µ–Ω–∞ –∫–Ω–∏–≥–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0", http.StatusBadRequest)
		return
	}

	// ‚úÖ –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É
	bookIDCounter++
	book.ID = bookIDCounter
	books = append(books, book)
	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(book)
}

func GetBookByID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id, _ := strconv.Atoi(params["id"])
	for _, book := range books {
		if book.ID == id {
			w.Header().Set("Content-Type", "application/json")
			json.NewEncoder(w).Encode(book)
			return
		}
	}
	w.WriteHeader(http.StatusNotFound)
}

func UpdateBook(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id, _ := strconv.Atoi(params["id"])

	for i, book := range books {
		if book.ID == id {
			var updatedBook models.Book
			err := json.NewDecoder(r.Body).Decode(&updatedBook)
			if err != nil {
				http.Error(w, `{"error": "–û—à–∏–±–∫–∞ –≤ JSON"}`, http.StatusBadRequest)
				return
			}

			// üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
			if updatedBook.Title == "" {
				http.Error(w, `{"error": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}`, http.StatusBadRequest)
				return
			}
			if updatedBook.AuthorID <= 0 {
				http.Error(w, `{"error": "ID –∞–≤—Ç–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0"}`, http.StatusBadRequest)
				return
			}
			if updatedBook.CategoryID <= 0 {
				http.Error(w, `{"error": "ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0"}`, http.StatusBadRequest)
				return
			}
			if updatedBook.Price <= 0 {
				http.Error(w, `{"error": "–¶–µ–Ω–∞ –∫–Ω–∏–≥–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"}`, http.StatusBadRequest)
				return
			}

			// ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–∏–≥—É (ID –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–∂–Ω–∏–º)
			updatedBook.ID = id
			books[i] = updatedBook

			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(http.StatusOK) // ‚úÖ –£–∫–∞–∑–∞–ª–∏ —Å—Ç–∞—Ç—É—Å 200
			json.NewEncoder(w).Encode(updatedBook)
			return
		}
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusNotFound)
	json.NewEncoder(w).Encode(map[string]string{"error": "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
}

func DeleteBook(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id, _ := strconv.Atoi(params["id"])
	for i, book := range books {
		if book.ID == id {
			books = append(books[:i], books[i+1:]...)
			w.WriteHeader(http.StatusNoContent)
			return
		}
	}
	w.WriteHeader(http.StatusNotFound)
}
